import React, { useState, useEffect } from 'react';
import { Location, LocationFormData, ViewMode } from './types';
import LocationCard from './components/LocationCard';
import LocationsTable from './components/LocationsTable';
import LocationForm from './components/LocationForm';
// Using inline SVG instead of react-icons/fa
import { getLocations, createLocation, updateLocation, deleteLocation } from './actions';
import './LocationsWidget.css';
// SweetAlert2 type definition
interface SweetAlertResult {
  isConfirmed: boolean;
  isDenied?: boolean;
  isDismissed?: boolean;
  value?: any;
}

// Mock SweetAlert2 for TypeScript - in a real app, you would install the package
const Swal = {
  fire: (options: any): Promise<SweetAlertResult> => {
    // This is just a mock for TypeScript
    // In a real app, this would be the actual SweetAlert2 library
    console.log('SweetAlert options:', options);
    return Promise.resolve({ isConfirmed: true });
  }
};

// Using CSS classes instead of styled-components

// Using CSS classes instead of styled-components

const ViewToggle = styled.div`
  display: flex;
  margin-left: ${LocationsTheme.spacing.md};
`;

const ViewButton = styled.button<{ active: boolean }>`
  background-color: ${props => props.active ? LocationsTheme.colors.primary.main : 'transparent'};
  color: ${props => props.active ? LocationsTheme.colors.primary.contrastText : LocationsTheme.colors.text.secondary};
  border: 1px solid ${props => props.active ? LocationsTheme.colors.primary.main : LocationsTheme.colors.border.main};
  border-radius: ${LocationsTheme.borderRadius.md};
  padding: ${LocationsTheme.spacing.sm};
  margin-left: ${LocationsTheme.spacing.xs};
  cursor: pointer;
  transition: all ${LocationsTheme.transitions.fast};
  
  &:hover {
    background-color: ${props => props.active ? LocationsTheme.colors.primary.dark : LocationsTheme.colors.interactive.hover};
  }
`;

const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  margin-bottom: ${LocationsTheme.spacing.lg};
`;

const SearchInput = styled.input`
  flex: 1;
  padding: ${LocationsTheme.spacing.md};
  border: 2px solid ${LocationsTheme.colors.border.main};
  border-radius: ${LocationsTheme.borderRadius.lg};
  background-color: ${LocationsTheme.colors.background.dark};
  color: ${LocationsTheme.colors.text.primary};
  font-size: ${LocationsTheme.typography.fontSize.md};
  
  &:focus {
    outline: none;
    border-color: ${LocationsTheme.colors.primary.main};
  }
  
  &::placeholder {
    color: ${LocationsTheme.colors.text.disabled};
  }
`;

const SearchIcon = styled.div`
  margin-left: -40px;
  color: ${LocationsTheme.colors.text.secondary};
`;

const FilterButton = styled.button`
  background-color: transparent;
  color: ${LocationsTheme.colors.text.secondary};
  border: 1px solid ${LocationsTheme.colors.border.main};
  border-radius: ${LocationsTheme.borderRadius.md};
  padding: ${LocationsTheme.spacing.sm} ${LocationsTheme.spacing.md};
  margin-left: ${LocationsTheme.spacing.md};
  cursor: pointer;
  display: flex;
  align-items: center;
  transition: all ${LocationsTheme.transitions.fast};
  
  &:hover {
    background-color: ${LocationsTheme.colors.interactive.hover};
  }
  
  svg {
    margin-right: ${LocationsTheme.spacing.xs};
  }
`;

const GridView = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: ${LocationsTheme.spacing.lg};
`;

interface ListViewProps {
  visible: boolean;
}

const ListView = styled.div<ListViewProps>`
  display: ${props => props.visible ? 'block' : 'none'};
`;

const Modal = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: ${LocationsTheme.colors.background.overlay};
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: ${LocationsTheme.zIndex.modal};
`;

const ModalContent = styled.div`
  background-color: ${LocationsTheme.colors.background.main};
  border-radius: ${LocationsTheme.borderRadius.xxl};
  padding: ${LocationsTheme.spacing.xl};
  width: 90%;
  max-width: 600px;
  max-height: 90vh;
  overflow-y: auto;
  position: relative;
  box-shadow: ${LocationsTheme.shadows.xl};
`;

const ModalHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: ${LocationsTheme.spacing.lg};
`;

const ModalTitle = styled.h3`
  font-size: ${LocationsTheme.typography.fontSize.lg};
  font-weight: ${LocationsTheme.typography.fontWeight.medium};
  color: ${LocationsTheme.colors.text.primary};
  text-transform: uppercase;
  margin: 0;
`;

const CloseButton = styled.button`
  background: none;
  border: none;
  color: ${LocationsTheme.colors.text.primary};
  font-size: ${LocationsTheme.typography.fontSize.xl};
  cursor: pointer;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  
  &:hover {
    color: ${LocationsTheme.colors.primary.main};
  }
`;

const LocationsWidget: React.FC = () => {
  const [locations, setLocations] = useState<Location[]>([]);
  const [filteredLocations, setFilteredLocations] = useState<Location[]>([]);
  const [viewMode, setViewMode] = useState<ViewMode>('grid');
  const [searchTerm, setSearchTerm] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingLocation, setEditingLocation] = useState<Location | undefined>(undefined);
  const [isLoading, setIsLoading] = useState(true);
  
  // Fetch locations on component mount
  useEffect(() => {
    fetchLocations();
  }, []);
  
  // Filter locations when search term changes
  useEffect(() => {
    if (searchTerm.trim() === '') {
      setFilteredLocations(locations);
    } else {
      const filtered = locations.filter(location => 
        location.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        location.address.toLowerCase().includes(searchTerm.toLowerCase())
      );
      setFilteredLocations(filtered);
    }
  }, [searchTerm, locations]);
  
  const fetchLocations = async () => {
    setIsLoading(true);
    try {
      const fetchedLocations = await getLocations();
      setLocations(fetchedLocations);
      setFilteredLocations(fetchedLocations);
    } catch (error) {
      console.error('Error fetching locations:', error);
      Swal.fire({
        title: 'Error',
        text: 'Failed to load locations. Please try again.',
        icon: 'error'
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleAddLocation = () => {
    setEditingLocation(undefined);
    setIsModalOpen(true);
  };
  
  const handleEditLocation = (location: Location) => {
    setEditingLocation(location);
    setIsModalOpen(true);
  };
  
  const handleDeleteLocation = (locationId: string) => {
    Swal.fire({
      title: 'Are you sure?',
      text: "You won't be able to revert this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: LocationsTheme.colors.status.error,
      cancelButtonColor: LocationsTheme.colors.primary.main,
      confirmButtonText: 'Yes, delete it!'
    }).then(async (result: SweetAlertResult) => {
      if (result.isConfirmed) {
        try {
          const success = await deleteLocation(locationId);
          if (success) {
            setLocations(prev => prev.filter(loc => loc.id !== locationId));
            Swal.fire({
              title: 'Deleted!',
              text: 'Location has been deleted.',
              icon: 'success'
            });
          } else {
            throw new Error('Failed to delete location');
          }
        } catch (error) {
          console.error('Error deleting location:', error);
          Swal.fire({
            title: 'Error',
            text: 'Failed to delete location. Please try again.',
            icon: 'error'
          });
        }
      }
    });
  };
  
  const handleFormSubmit = async (formData: LocationFormData) => {
    try {
      if (editingLocation) {
        // Update existing location
        const updatedLocation = await updateLocation(editingLocation.id, formData);
        if (updatedLocation) {
          setLocations(prev => 
            prev.map(loc => loc.id === editingLocation.id ? updatedLocation : loc)
          );
          Swal.fire({
            title: 'Success',
            text: 'Location updated successfully',
            icon: 'success'
          });
        } else {
          throw new Error('Failed to update location');
        }
      } else {
        // Create new location
        const newLocation = await createLocation(formData);
        if (newLocation) {
          setLocations(prev => [...prev, newLocation]);
          Swal.fire({
            title: 'Success',
            text: 'Location created successfully',
            icon: 'success'
          });
        } else {
          throw new Error('Failed to create location');
        }
      }
      setIsModalOpen(false);
    } catch (error) {
      console.error('Error saving location:', error);
      Swal.fire({
        title: 'Error',
        text: 'Failed to save location. Please try again.',
        icon: 'error'
      });
    }
  };
  
  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };
  
  return (
    <div className="locations-widget">
      <div className="locations-header">
        <h2 className="locations-title">Locations</h2>
        <div className="locations-actions">
          <button className="locations-action-button" onClick={handleAddLocation}>
            <svg width="14" height="14" viewBox="0 0 448 512">
              <path fill="currentColor" d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"></path>
            </svg> Add Location
          </button>
          <div className="locations-view-toggle">
            <button 
              className={`locations-view-button ${viewMode === 'grid' ? 'active' : ''}`} 
              onClick={() => setViewMode('grid')}
            >
              <svg width="14" height="14" viewBox="0 0 512 512">
                <path fill="currentColor" d="M149.333 56v80c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24h101.333c13.255 0 24 10.745 24 24zm181.334 240v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm32-240v80c0 13.255 10.745 24 24 24H488c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24zm-32 80V56c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm-205.334 56H24c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24zM0 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm386.667-56H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zm0 160H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zM181.333 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24z"></path>
              </svg>
            </button>
            <button 
              className={`locations-view-button ${viewMode === 'list' ? 'active' : ''}`} 
              onClick={() => setViewMode('list')}
            >
              <svg width="14" height="14" viewBox="0 0 512 512">
                <path fill="currentColor" d="M80 368H16a16 16 0 0 0-16 16v64a16 16 0 0 0 16 16h64a16 16 0 0 0 16-16v-64a16 16 0 0 0-16-16zm0-320H16A16 16 0 0 0 0 64v64a16 16 0 0 0 16 16h64a16 16 0 0 0 16-16V64a16 16 0 0 0-16-16zm0 160H16a16 16 0 0 0-16 16v64a16 16 0 0 0 16 16h64a16 16 0 0 0 16-16v-64a16 16 0 0 0-16-16zm416 176H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
      
      <div className="locations-search">
        <div className="locations-search-wrapper">
          <input 
            className="locations-search-input" 
            type="text" 
            placeholder="Search locations..." 
            value={searchTerm}
            onChange={handleSearchChange}
          />
          <div className="locations-search-icon">
            <svg width="14" height="14" viewBox="0 0 512 512">
              <path fill="currentColor" d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"></path>
            </svg>
          </div>
        </div>
        <button className="locations-action-button">
          <svg width="14" height="14" viewBox="0 0 512 512">
            <path fill="currentColor" d="M487.976 0H24.028C2.71 0-8.047 25.866 7.058 40.971L192 225.941V432c0 7.831 3.821 15.17 10.237 19.662l80 55.98C298.02 518.69 320 507.493 320 487.98V225.941l184.947-184.97C520.021 25.896 509.338 0 487.976 0z"></path>
          </svg> Filter
        </button>
      </div>
      
      <div className="locations-content">
        {isLoading ? (
          <div className="locations-loading">Loading locations...</div>
        ) : (
          <>
            {/* Grid View */}
            {viewMode === 'grid' && (
              <div className="locations-grid">
                {filteredLocations.length > 0 ? (
                  filteredLocations.map(location => (
                    <LocationCard 
                      key={location.id}
                      location={location}
                      onEdit={handleEditLocation}
                      onDelete={handleDeleteLocation}
                    />
                  ))
                ) : (
                  <div className="locations-empty">
                    <svg width="48" height="48" viewBox="0 0 24 24">
                      <path fill="currentColor" d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                      <circle cx="12" cy="10" r="3"></circle>
                    </svg>
                    <p className="locations-empty-text">No locations found</p>
                    <button className="locations-empty-button" onClick={handleAddLocation}>Add Location</button>
                  </div>
                )}
              </div>
            )}
            
            {/* List View */}
            {viewMode === 'list' && (
              <LocationsTable 
                locations={filteredLocations}
                onEdit={handleEditLocation}
                onDelete={handleDeleteLocation}
              />
            )}
          </>
        )}
      </div>
      
      {/* Modal for adding/editing locations */}
      {isModalOpen && (
        <div className="locations-modal">
          <div className="locations-modal-content">
            <div className="locations-modal-header">
              <h3 className="locations-modal-title">
                {editingLocation ? 'Edit Location' : 'Add Location'}
              </h3>
              <button className="locations-close-button" onClick={() => setIsModalOpen(false)}>
                ×
              </button>
            </div>
            <LocationForm 
              location={editingLocation}
              onSubmit={handleFormSubmit}
              onCancel={() => setIsModalOpen(false)}
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default LocationsWidget;
